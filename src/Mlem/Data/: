{-# LANGUAGE GADTs                #-}
{-# LANGUAGE AllowAmbiguousTypes  #-}
{-# LANGUAGE UndecidableInstances #-}
-- |
--------------------------------------------------------------------------------
module Mlem.Data.Vec
  ( Vec(..)
  , replicate
  ) where
--------------------------------------------------------------------------------
import Mlem.Prelude hiding
  ( zipWith
  , replicate
  , toList
  , foldMap
  )
import Data.Constraint
import Data.Foldable (foldMap)
import GHC.Exts (IsList(Item, fromList))
import qualified GHC.Exts as Exts
--------------------------------------------------------------------------------
import Mlem.Data.Peano
import Mlem.Constraint.Axioms
--------------------------------------------------------------------------------

infixl 4 :<

data Vec (n :: Nat) (a :: Type) where
  VNil :: Vec 0 a
  (:<) :: a -> Vec n a -> Vec (n + 1) a

instance Functor (Vec n) where
  fmap _ VNil      = VNil
  fmap f (x :< xs) = f x :< fmap f xs

class Replicate' (n :: Nat) (n' :: Peano) where
  replicate' :: a -> Vec n a

instance Replicate' 0 Z where
  replicate' _ = VNil

instance (Replicate' n n', m ~ (n + 1)) => Replicate' m ('S n') where
  replicate' x = x :< replicate' @n @n' x

type Replicate n = (Replicate' n (PN n))

replicate :: forall n a. Replicate n => a -> Vec n a
replicate = replicate' @n @(PN n)

zipWith :: forall n a b c. (a -> b -> c) -> Vec n a -> Vec n b -> Vec n c
zipWith _ VNil VNil = VNil
zipWith f (a :< (as :: Vec n1 a)) (b :< (bs :: Vec m1 b)) =
  f a b :< case plusInj @n1 @m1 @n @1 of
    Sub Dict -> zipWith f as bs

-- | Acts like a ZipList
instance Replicate n => Applicative (Vec n) where
  pure  = replicate @n
  (<*>) = zipWith id

class FromList' (n :: Nat) (n' :: Peano) where
  fromList' :: [a] -> Maybe (Vec n a)

instance FromList' 0 'Z where
  fromList' [] = Just VNil
  fromList' _  = Nothing

instance (FromList' n n', m ~ (n + 1)) => FromList' m ('S n') where
  fromList' (x:xs) = (x :<) <$> fromList' @n @n' xs
  fromList' _      = Nothing

type FromList n = FromList' n (PN n)

fromListMay :: forall n a. FromList n => [a] -> Maybe (Vec n a)
fromListMay = fromList' @n @(PN n)

toList :: Vec n a -> [a]
toList VNil      = []
toList (x :< xs) = x : toList xs

instance FromList n => IsList (Vec n a) where
  type Item (Vec n a) = a
  fromList =
    maybe
      (error "Wrong number of elements for fixed-size vector as list literal")
      id
    . fromListMay

  toList = toList

instance Foldable (Vec n) where
  foldMap _ VNil      = mempty
  foldMap f (x :< xs) = f x <> foldMap f xs

instance Traversable (Vec n) where
  traverse _ VNil      = pure VNil
  traverse f (x :< xs) = (:<) <$> f x <*> traverse f xs
